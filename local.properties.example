## Windows code signing
winCodesignFile=
winCodesignPassword=
winCodesignTimestampUrl=

## Mac code signing
macCodesignIdentity=

## Mac notarization
macNotarizationUsername=

## Java Web Start code signing
# Base URL for all Web Start files
jwsCodebase=
# Setup key information for signing jar
# - keystore:  keystore file
# - storetype: the type of keystore; specify 'pkcs12' if not default ('jks')
# - alias:     alias of private key in keystore file
# - storepass: password for access to keystore
# - keypass:   password for private key (comment out when equal to storepass)
#
# You can create a key for testing by command:
#  keytool -genkey -alias <alias> -keystore <keystore>
# e.g.,
#  keytool -genkey -alias webstart -keystore OmegaT.keystore
#jwsKeystore=
#jwsStoretype=
#jwsAlias=
#jwsStorepass=
#jwsKeypass=
# URL for timestamp. See: https://ant.apache.org/manual/Tasks/signjar.html
#jwsTsaurl=

## Sonatype OSSRH publishing (synced to Maven Central)
ossrhUser=
ossrhKey=

## Signing for Maven Central
# Last 8 characters of full key ID
signing.keyId=
signing.password=
# Exported as e.g. `gpg --export-secret-keys > secring.gpg`
signing.secretKeyRingFile=

# When you don't define signing.keyId, gradle try to use GnuPG command
# (GnupgSignatory) instead of the default PgpSignatory.
# The GnupgSignatory relies on the gpg2 program to sign the artifacts.
# Please see https://docs.gradle.org/current/userguide/signing_plugin.html#sec:sec:gnupg_signatory_configuration
# for configurations details.
#
# - signing.gnupg.executable=gpg
#    The gpg executable that is invoked for signing.
# - signing.gnupg.keyName=
#    The id of the key that should be used for signing. If not given then
#    the default key configured in GnuPG will be used.
# - signing.gnupg.passphrase
#    The passphrase for unlocking the secret key. If not given then
#    the gpg-agent program is used for getting the passphrase.

## SourceForge web
sourceforgeWebUser=
# Not required when using SSH auth
sourceforgeWebPassword=
